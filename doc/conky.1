.\" -*- coding: us-ascii -*-
.TH conky 1 2005-08-18  
.SH NAME
conky \- a system monitor for X originally based on the torsmo code, but more kickass.
.SH SYNOPSIS
.ad l
\fBconky\fR \kx
.if (\nxu > (\n(.lu / 2)) .nr x (\n(.lu / 5)
'in \n(.iu+\nxu
[\fBoptions\fR]
'in \n(.iu-\nxu
.ad b
.SH DESCRIPTION
Conky is a system monitor for X originally based on the torsmo code. 
Since it's original conception, Conky has changed a fair bit from it's predecessor. 
Conky can display just about anything, either on your root desktop or in it's own window. 
Conky has many built-in objects, as well as the ability to execute programs and scripts, 
then display the output from stdout.
.PP
We are always looking for help, and anyone interested in becoming a developer is welcome. 
Please use the facilities at SourceForge to make bug reports, feature requests, and submit patches.
.PP
Thanks for your interest in Conky.
.SH COMPILING
To compile and run Conky with all optional components (If you run Gentoo, see the "Ebuild" Section below):
.TP 
\fBsh autogen.sh\fR \fB# Only required if building from CVS\fR 
.TP 
\fB\&./configure \fR\fB\-\-prefix=/usr \-\-mandir=/usr/share/man \-\-infodir=/usr/share/info \-\-datadir=/usr/ share \-\-sysconfdir=/etc \-\-localstatedir=/var/lib \-\-enable\-double\-buffer \-\-enable\-own\-window \-\-enable\-proc\-uptime \-\-enable\-mpd \-\-enable\-xft \-\-enable\-seti\fR 
.TP 
\fBmake\fR 
.TP 
\fB\&./conky\fR 
.PP
Conky doesn't probably compile with other compilers than gcc and icc. 
It doesn't compile with C89 compiler and not even with pure C99.
It uses few things that might not exist: strdup(), strcasecmp(), strncasecmp(), 
optarg variable with getopt() and long long (not in C89). Crashes in file system
statistics stuff when compiled with icc, I don't know exactly why.
.PP
You can disable 'drawing to own window' feature in case you don't need it by passing 
--disable-own-window to configure -script.
.PP
Conky is in Gentoo's Portage. Simply use "emerge conky" to install conky. 
There is also usually an up-to-date ebuild within Conky's package or in CVS.
.SH "YOU SHOULD KNOW"
Conky is generally very good on resources. However, certain objects in
Conky are harder on resources then others. In particular, the $tail,
$top, $font, and $graph objects are quite costly in comparison to the rest of Conky.
.PP
If you do use them, please do not complain about memory or CPU usage, 
unless you think something is going seriously wrong (mem leak, et cetera).
.SH OPTIONS
Command line options override configurations defined in configuration file.
.TP 
\fB\-V\fR
Prints version and exits

.TP 
\fB\-a \fR\fBALIGNMENT\fR
Text alignment on screen, {top,bottom}_{left,right} or none

.TP 
\fB\-b\fR
Use double buffering (eliminates flicker)

.TP 
\fB\-c \fR\fBFILE\fR
Config file to load instead of $HOME/.conkyrc

.TP 
\fB\-d\fR
Daemonize, fork to background

.TP 
\fB\-f \fR\fBFONT\fR
Font to use

.TP 
\fB\-h\fR
Prints command line help and exits

.TP 
\fB\-o\fR
Create own window to draw

.TP 
\fB\-t \fR\fBTEXT\fR
Text to render, remember single quotes, like -t ' $uptime '

.TP 
\fB\-u \fR\fBSECONDS\fR
Update interval

.TP 
\fB\-w \fR\fBWIN_ID\fR
Window id to draw

.TP 
\fB\-x \fR\fBX_COORDINATE\fR
X position

.TP 
\fB\-y \fR\fBY_COORDINATE\fR
Y position

.SH "CONFIGURATION SETTINGS"
Default configuration file is $HOME/.conkyrc (can be changed from
conky.c among other things). See conkyrc.sample. You might want to copy
it to $HOME/.conkyrc and then start modifying it.
.TP 
\fBalignment\fR
Aligned position on screen, may be top_left, top_right, bottom_left, bottom_right, or none

.TP 
\fBbackground\fR
Boolean value, if true, Conky will be forked to background when started

.TP 
\fBon_bottom\fR
Set conky on the bottom of all other applications

.TP 
\fBborder_margin\fR
Border margin in pixels

.TP 
\fBborder_width\fR
Border width in pixels

.TP 
\fBcpu_avg_samples\fR
The number of samples to average for CPU monitoring

.TP 
\fBdefault_color\fR
Default color and border color

.TP 
\fBdefault_shade_color\fR
Default shading color and border's shading color

.TP 
\fBdefault_outline_color\fR
Default outline color

.TP 
\fBdouble_buffer\fR
Use the Xdbe extension? (eliminates flicker) It is highly recommended to use own window with this one so double buffer won't be so big.

.TP 
\fBdraw_borders\fR
Draw borders around text?

.TP 
\fBdraw_shades\fR
Draw shades?

.TP 
\fBdraw_outline\fR
Draw outlines?

.TP 
\fBfont\fR
Font name in X, xfontsel can be used to get a nice font

.TP 
\fBgap_x\fR
Gap between right or left border of screen, same as passing -x at command line

.TP 
\fBgap_y\fR
Gap between top or bottom border of screen, same as passing -y at command line

.TP 
\fBno_buffers\fR
Substract (file system) buffers from used memory?

.TP 
\fBmail_spool\fR
Mail spool for mail checking

.TP 
\fBminimum_size\fR
Minimum size of window

.TP 
\fBmldonkey_hostname\fR
Hostname for mldonkey stuff, defaults to localhost

.TP 
\fBmldonkey_port\fR
Mldonkey port, 4001 default

.TP 
\fBmldonkey_login\fR
Mldonkey login, default none

.TP 
\fBmldonkey_password\fR
Mldonkey password, default none

.TP 
\fBmpd_host\fR
Host of MPD server

.TP 
\fBmpd_post\fR
Port of MPD server

.TP 
\fBmpd_password\fR
MPD server password

.TP 
\fBnet_avg_samples\fR
The number of samples to average for net data

.TP 
\fBoverride_utf8_locale\fR
Force UTF8? requires XFT

.TP 
\fBown_window\fR
Boolean, create own window to draw?

.TP 
\fBpad_percents\fR
Pad percentages to this many decimals (0 = no padding)

.TP 
\fBstippled_borders\fR
Border stippling (dashing) in pixels

.TP 
\fBtotal_run_times\fR
Total number of times for Conky to update before quitting. Zero makes Conky run forever

.TP 
\fBupdate_interval\fR
Update interval in seconds

.TP 
\fBuppercase\fR
Boolean value, if true, text is rendered in upper case

.TP 
\fBuse_spacer\fR
Adds spaces after certain objects to stop them from moving other things around. Note that this only helps if you are using a mono font, such as Bitstream Vera Sans Mono.

.TP 
\fBuse_xft\fR
Use Xft (anti-aliased font and stuff)

.TP 
\fBtext\fR
After this begins text to be formatted on screen

.SH VARIABLES
Colors are parsed using XParsecolor(), there might be a list of them:
/usr/X11R6/lib/X11/rgb.txt. Also, 
http://sedition.com/perl/rgb.html [http://sedition.com/perl/rgb.html]
Color can be also in #rrggbb format (hex).
Note that when displaying bytes, power is 1024 and not 1000 so 1M really
means 1024*1024 bytes and not 1000*1000.
.TP 
\fBaddr\fR \fB(interface)\fR 
IP address for an interface

.TP 
\fBacpiacadapter\fR 
ACPI ac adapter state.

.TP 
\fBacpifan\fR 
ACPI fan state

.TP 
\fBacpitemp\fR 
ACPI temperature in C.

.TP 
\fBacpitempf\fR 
ACPI temperature in F.

.TP 
\fBadt746xcpu\fR 
CPU temperature from therm_adt746x

.TP 
\fBadt746xfan\fR 
Fan speed from therm_adt746x

.TP 
\fBalignr\fR \fB(num)\fR 
Right-justify text, with space of N

.TP 
\fBalignc\fR \fB(num)\fR 
Align text to centre

.TP 
\fBbattery\fR \fB(num)\fR 
Remaining capacity in ACPI or APM battery. ACPI battery number can be given as argument (default is BAT0).

.TP 
\fBbuffers\fR 
Amount of memory buffered

.TP 
\fBcached\fR 
Amount of memory cached

.TP 
\fBcolor\fR \fB(color)\fR 
Change drawing color to color

.TP 
\fBcpu\fR 
CPU usage in percents

.TP 
\fBcpubar\fR \fB(height),(width)\fR 
Bar that shows CPU usage, height is bar's height in pixels

.TP 
\fBcpugraph\fR \fB(height),(width) (gradient colour 1) (gradient colour 2)\fR 
CPU usage graph, with optional colours in hex, minus the #.

.TP 
\fBdownspeed\fR \fBnet\fR 
Download speed in kilobytes

.TP 
\fBdownspeedf\fR \fBnet\fR 
Download speed in kilobytes with one decimal

.TP 
\fBdownspeedgraph\fR \fBnet, (height),(width) (gradient colour 1) (gradient colour 2)\fR 
Download speed graph, colours defined in hex, minus the #.

.TP 
\fBelse\fR 
Text to show if any of the above are not true

.TP 
\fBexec\fR \fBshell command\fR 
Executes a shell command and displays the output in conky. warning: this takes a lot more resources than other variables. I'd recommend coding wanted behaviour in C and posting a patch.

.TP 
\fBexecbar\fR \fBshell command\fR 
Same as exec, except if the first value return is a value between 0-100, it will use that number for a bar. The size for the bar is currently fixed, but that may change in the future.

.TP 
\fBexecgraph\fR \fBshell command\fR 
Same as execbar, but graphs values

.TP 
\fBexeci\fR \fBinterval, shell command\fR 
Same as exec but with specific interval. Interval can't be less than update_interval in configuration.

.TP 
\fBfont\fR \fBfont\fR 
Specify a different font. Only applies to one line.

.TP 
\fBfreq\fR 
Returns CPU frequency in MHz

.TP 
\fBfreq_g\fR 
Returns CPU frequency in GHz

.TP 
\fBfs_bar\fR \fB(height),(width) fs\fR 
Bar that shows how much space is used on a file system. height is the height in pixels. fs is any file on that file system.

.TP 
\fBfs_free\fR \fB(fs)\fR 
Free space on a file system available for users.

.TP 
\fBfs_free_perc\fR \fB(fs)\fR 
Free percentage of space on a file system available for users.

.TP 
\fBfs_size\fR \fB(fs)\fR 
File system size

.TP 
\fBfs_used\fR \fB(fs)\fR 
File system used space

.TP 
\fBhr\fR \fB(height)\fR 
Horizontal line, height is the height in pixels

.TP 
\fBi2c\fR \fB(dev), type, n\fR 
I2C sensor from sysfs (Linux 2.6). dev may be omitted if you have only one I2C device. type is either in (or vol) meaning voltage, fan meaning fan or temp/tempf (first in C, second in F) meaning temperature. n is number of the sensor. See /sys/bus/i2c/devices/ on your local computer.

.TP 
\fBif_running\fR \fB(process)\fR 
if PROCESS is running, display everything if_running and the matching $endif

.TP 
\fBif_existing\fR \fB(file)\fR 
if FILE exists, display everything between if_existing and the matching $endif

.TP 
\fBif_mounted\fR \fB(mountpoint)\fR 
if MOUNTPOINT is mounted, display everything between if_mounted and the matching $endif

.TP 
\fBkernel\fR 
Kernel version

.TP 
\fBlinkstatus\fR \fB(interface)\fR 
Get the link status for wireless connections

.TP 
\fBloadavg\fR 
(1,2,3)> System load average, 1 is for past 1 minute, 2 for past 5 minutes and 3 for past 15 minutes.

.TP 
\fBmachine\fR 
Machine, i686 for example

.TP 
\fBmails\fR 
Mail count in mail spool. You can use program like fetchmail to get mails from some server using your favourite protocol. See also new_mails.

.TP 
\fBmem\fR 
Amount of memory in use

.TP 
\fBmembar\fR \fB(height),(width)\fR 
Bar that shows amount of memory in use

.TP 
\fBmemmax\fR 
Total amount of memory

.TP 
\fBmemperc\fR 
Percentage of memory in use

.TP 
\fBml_upload_counter\fR 
total session upload in mb

.TP 
\fBml_download_counter\fR 
total session download in mb

.TP 
\fBml_nshared_files\fR 
number of shared files

.TP 
\fBml_shared_counter\fR 
total session shared in mb, buggy in some mldonkey versions

.TP 
\fBml_tcp_upload_rate\fR 
tcp upload rate in kb/s

.TP 
\fBml_tcp_download_rate\fR 
tcp download rate in kb/s

.TP 
\fBml_udp_upload_rate\fR 
udp upload rate in kb/s

.TP 
\fBml_udp_download_rate\fR 
udp download rate in kb/s

.TP 
\fBml_ndownloaded_files\fR 
number of completed files

.TP 
\fBml_ndownloading_files\fR 
number of downloading files

.TP 
\fBmpd_artist\fR 
Artist in current MPD song must be enabled at compile

.TP 
\fBmpd_album\fR 
Album in current MPD song

.TP 
\fBmpd_bar\fR \fB(height),(width)\fR 
Bar of mpd's progress

.TP 
\fBmpd_bitrate\fR 
Bitrate of current song

.TP 
\fBmpd_status\fR 
Playing, stopped, et cetera.

.TP 
\fBmpd_title\fR 
Title of current MPD song

.TP 
\fBmpd_vol\fR 
MPD's volume

.TP 
\fBmpd_elapsed\fR 
Song's elapsed time

.TP 
\fBmpd_length\fR 
Song's length

.TP 
\fBmpd_percent\fR 
Percent of song's progress

.TP 
\fBnew_mails\fR 
Unread mail count in mail spool.

.TP 
\fBnodename\fR 
Hostname

.TP 
\fBoutlinecolor\fR \fB(color)\fR 
Change outline color

.TP 
\fBpre_exec\fR \fBshell command\fR 
Executes a shell command one time before conky displays anything and puts output as text.

.TP 
\fBprocesses\fR 
Total processes (sleeping and running)

.TP 
\fBrunning_processes\fR 
Running processes (not sleeping), requires Linux 2.6

.TP 
\fBshadecolor\fR \fB(color)\fR 
Change shading color

.TP 
\fBstippled_hr\fR \fB(space)\fR 
Stippled (dashed) horizontal line

.TP 
\fBswapbar\fR \fB(height),(width)\fR 
Bar that shows amount of swap in use

.TP 
\fBswap\fR 
Amount of swap in use

.TP 
\fBswapmax\fR 
Total amount of swap

.TP 
\fBswapperc\fR 
Percentage of swap in use

.TP 
\fBsysname\fR 
System name, Linux for example

.TP 
\fBoffset\fR \fB(pixels)\fR 
Move text over by N pixels. See also $voffset.

.TP 
\fBtail\fR 
logfile, lines interval> Displays last N lines of supplied text text file. If interval is not supplied, Conky assumes 2x Conky's interval. Max of 30 lines. Max of 30 lines can be displayed.

.TP 
\fBtime\fR \fB(format)\fR 
Local time, see man strftime to get more information about format

.TP 
\fBtotaldown\fR \fBnet\fR 
Total download, overflows at 4 GB on Linux with 32-bit arch and there doesn't seem to be a way to know how many times it has already done that before conky has started.

.TP 
\fBtop\fR \fBtype, num\fR 
This takes arguments in the form:top (name) (number) Basically, processes are ranked from highest to lowest in terms of cpu usage, which is what (num) represents. The types are: "name", "pid", "cpu", and mem". There can be a max of 10 processes listed.

.TP 
\fBtop_mem\fR \fBtype, num\fR 
Same as top, except sorted by mem usage instead of cpu

.TP 
\fBtotalup\fR \fBnet\fR 
Total upload, this one too, may overflow

.TP 
\fBupdates\fR \fBNumber of updates\fR 
for debugging

.TP 
\fBupspeed\fR \fBnet\fR 
Upload speed in kilobytes

.TP 
\fBupspeedf\fR \fBnet\fR 
Upload speed in kilobytes with one decimal

.TP 
\fBupspeedgraph\fR \fBnet, (height),(width) (gradient colour 1) (gradient colour 2)\fR 
Upload speed graph, colours defined in hex, minus the #.

.TP 
\fBuptime\fR 
Uptime

.TP 
\fBuptime_short\fR 
Uptime in a shorter format

.TP 
\fBseti_prog\fR 
Seti@home current progress

.TP 
\fBseti_progbar\fR \fB(height),(width)\fR 
Seti@home current progress bar

.TP 
\fBseti_credit\fR 
Seti@home total user credit

.TP 
\fBvoffset\fR \fB(pixels)\fR 
Change verticle offset by N pixels. Negative values will cause text to overlap. See also $offset.

.SH EXAMPLES
.TP 
conky \fB\-t '${time %D %H:%m}' \-o \-u 30\fR
Start Conky in its own window with date and clock as text and 30 sec update interval.
.TP 
conky \fB\-a top_left \-x 5 \-y 500 \-d\fR
Start Conky to background at coordinates (5, 500).
.SH FILES
\fB~/.conkyrc\fR default configuration file
.SH BUGS
Drawing to root or some other desktop window directly doesn't work with 
all window managers. Especially doesn't work well with Gnome and it has 
been reported that it doesn't work with KDE either. Nautilus can be 
disabled from drawing to desktop with program gconf-editor. Uncheck 
show_desktop in /apps/nautilus/preferences/. There is -w switch in Conky 
to set some specific window id. You might find xwininfo -tree useful to 
find the window to draw to. You can also use -o argument which makes
Conky to create its own window.
.SH "SEE ALSO"
http://conky.sourceforge.net [http://conky.sourceforge.net]
.PP
http://www.sourceforge.net/projects/conky [http://www.sourceforge.net/projects/conky]
.PP
#conky on irc.freenode.net
.SH AUTHORS
The Conky dev team. What's up now??!
